// app-examples/crypto-send/index.js

/**
 * Crypto Send App
 * 
 * This app demonstrates how to create a crypto sending application within the Intersend platform.
 * It showcases:
 * 1. How to fetch and display available cryptocurrencies
 * 2. How to estimate exchange rates
 * 3. How to create and confirm transactions
 * 4. How to handle the transaction flow using Intersend's API
 * 
 * Architecture Overview:
 * - The app runs within the Intersend platform
 * - It uses Intersend's API for authentication, fetching crypto data, and processing transactions
 * - It interacts with multiple exchanges through Intersend's backend to get the best rates
 * 
 * Note: This example uses environment variables for sensitive data.
 * Ensure you have set up your .env file with the necessary values.
 */

import React, { useState, useEffect } from 'react';
import axios from 'axios';

const CryptoSendApp = () => {
  const [cryptos, setCryptos] = useState([]);
  const [selectedCrypto, setSelectedCrypto] = useState(null);
  const [amount, setAmount] = useState('');
  const [estimatedAmount, setEstimatedAmount] = useState(null);
  const [walletAddress, setWalletAddress] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [transactionStatus, setTransactionStatus] = useState(null);
  const [authToken, setAuthToken] = useState(null);

  useEffect(() => {
    initializeApp();
    fetchCryptos();
  }, []);

  const initializeApp = async () => {
    try {
      const response = await axios.post('https://node.intersend.io/app/initialize', {
        appId: process.env.REACT_APP_CRYPTO_SEND_APP_ID
      });
      setAuthToken(response.data.token);
    } catch (error) {
      console.error('Failed to initialize app:', error);
    }
  };

  const fetchCryptos = async () => {
    try {
      const response = await axios.get('https://node.intersend.io/app/crypto/list', {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      setCryptos(response.data);
      if (response.data.length > 0) {
        setSelectedCrypto(response.data[0]);
      }
    } catch (error) {
      console.error('Error fetching cryptos:', error);
    }
  };

  const estimateExchangeAmount = async () => {
    if (!selectedCrypto || !amount) return;
    setIsLoading(true);
    try {
      const response = await axios.post('https://node.intersend.io/app/crypto/estimate', {
        fromCurrency: 'USDT',
        toCurrency: selectedCrypto.ticker,
        amount: amount
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      setEstimatedAmount(response.data.estimatedAmount);
    } catch (error) {
      console.error('Error estimating exchange amount:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSendTransaction = async () => {
    setIsLoading(true);
    try {
      const response = await axios.post('https://node.intersend.io/app/crypto/send', {
        fromCurrency: 'USDT',
        toCurrency: selectedCrypto.ticker,
        amount: amount,
        toAddress: walletAddress
      }, {
        headers: { Authorization: `Bearer ${authToken}` }
      });
      setTransactionStatus('success');
    } catch (error) {
      console.error('Error sending transaction:', error);
      setTransactionStatus('failed');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div>
      <h1>Send Crypto</h1>
      <select onChange={(e) => setSelectedCrypto(cryptos.find(c => c.ticker === e.target.value))}>
        {cryptos.map(crypto => (
          <option key={crypto.ticker} value={crypto.ticker}>{crypto.name}</option>
        ))}
      </select>
      <input
        type="number"
        value={amount}
        onChange={(e) => setAmount(e.target.value)}
        placeholder="Amount in USDT"
      />
      <input
        type="text"
        value={walletAddress}
        onChange={(e) => setWalletAddress(e.target.value)}
        placeholder="Recipient Address"
      />
      <button onClick={estimateExchangeAmount} disabled={isLoading}>
        Estimate
      </button>
      {estimatedAmount && (
        <p>Estimated amount: {estimatedAmount} {selectedCrypto.ticker}</p>
      )}
      <button onClick={handleSendTransaction} disabled={isLoading || !estimatedAmount}>
        Send
      </button>
      {transactionStatus && (
        <p>Transaction {transactionStatus}</p>
      )}
    </div>
  );
};

export default CryptoSendApp;
